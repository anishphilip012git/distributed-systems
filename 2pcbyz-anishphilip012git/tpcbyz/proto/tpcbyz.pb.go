// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto/tpcbyz.proto

package tpcbyz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status response for RPC functions
type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates success or failure of the RPC call
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_proto_tpcbyz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{0}
}

func (x *StatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Reply message from replica to client
type ClientReplyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber       int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                  // Current view number
	RequestId        int64  `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                     // Unique request ID
	Status           string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                             // Execution status of the request
	ReplicaSignature string `protobuf:"bytes,4,opt,name=replica_signature,json=replicaSignature,proto3" json:"replica_signature,omitempty"` // Replica's signature on the reply
	NodeId           string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *ClientReplyMessage) Reset() {
	*x = ClientReplyMessage{}
	mi := &file_proto_tpcbyz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReplyMessage) ProtoMessage() {}

func (x *ClientReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReplyMessage.ProtoReflect.Descriptor instead.
func (*ClientReplyMessage) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{1}
}

func (x *ClientReplyMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *ClientReplyMessage) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ClientReplyMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClientReplyMessage) GetReplicaSignature() string {
	if x != nil {
		return x.ReplicaSignature
	}
	return ""
}

func (x *ClientReplyMessage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_tpcbyz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{2}
}

type TPCCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitRequest *CommitRequest `protobuf:"bytes,1,opt,name=commit_request,json=commitRequest,proto3" json:"commit_request,omitempty"`
	Message       string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TPCCertificate) Reset() {
	*x = TPCCertificate{}
	mi := &file_proto_tpcbyz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCCertificate) ProtoMessage() {}

func (x *TPCCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCCertificate.ProtoReflect.Descriptor instead.
func (*TPCCertificate) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{3}
}

func (x *TPCCertificate) GetCommitRequest() *CommitRequest {
	if x != nil {
		return x.CommitRequest
	}
	return nil
}

func (x *TPCCertificate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy bool `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"` // Indicates if the shard is healthy
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_proto_tpcbyz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{4}
}

func (x *HealthResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

// Transaction-related messages
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   int64 `protobuf:"varint,1,opt,name=sender,proto3" json:"sender,omitempty"`     // Sender ID
	Receiver int64 `protobuf:"varint,2,opt,name=receiver,proto3" json:"receiver,omitempty"` // Receiver ID
	Amount   int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`     // Transfer amount
	Index    int64 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	SeqNo    int64 `protobuf:"varint,5,opt,name=seqNo,proto3" json:"seqNo,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_proto_tpcbyz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{5}
}

func (x *Transaction) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *Transaction) GetReceiver() int64 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *Transaction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction) GetSeqNo() int64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the transaction was successful
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Optional message for additional details
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	mi := &file_proto_tpcbyz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Client request message with transaction
type ClientRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId        string       `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Timestamp       int64        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Transaction     *Transaction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"` // The transaction to be sent
	ClientSignature string       `protobuf:"bytes,4,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"`
}

func (x *ClientRequestMessage) Reset() {
	*x = ClientRequestMessage{}
	mi := &file_proto_tpcbyz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequestMessage) ProtoMessage() {}

func (x *ClientRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequestMessage.ProtoReflect.Descriptor instead.
func (*ClientRequestMessage) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{7}
}

func (x *ClientRequestMessage) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientRequestMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ClientRequestMessage) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ClientRequestMessage) GetClientSignature() string {
	if x != nil {
		return x.ClientSignature
	}
	return ""
}

// Pre-prepare message from leader to replicas
type PrePrepareMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber        int64                 `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`               // Current view number
	SequenceNumber    int64                 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`   // Sequence number assigned by leader
	Request           *ClientRequestMessage `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`                                        // Original client request
	LeaderSignature   string                `protobuf:"bytes,4,opt,name=leader_signature,json=leaderSignature,proto3" json:"leader_signature,omitempty"` // Leader's individual signature for authenticity
	ClientRequestHash string                `protobuf:"bytes,5,opt,name=client_request_hash,json=clientRequestHash,proto3" json:"client_request_hash,omitempty"`
}

func (x *PrePrepareMessage) Reset() {
	*x = PrePrepareMessage{}
	mi := &file_proto_tpcbyz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrePrepareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepareMessage) ProtoMessage() {}

func (x *PrePrepareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepareMessage.ProtoReflect.Descriptor instead.
func (*PrePrepareMessage) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{8}
}

func (x *PrePrepareMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrePrepareMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PrePrepareMessage) GetRequest() *ClientRequestMessage {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PrePrepareMessage) GetLeaderSignature() string {
	if x != nil {
		return x.LeaderSignature
	}
	return ""
}

func (x *PrePrepareMessage) GetClientRequestHash() string {
	if x != nil {
		return x.ClientRequestHash
	}
	return ""
}

type PrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber  int64             `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`                                                          // Sequence number of the transaction
	Digest          string            `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`                                                                                                 // Digest of the pre-prepare message
	Signatures      map[string]string `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 2f+1 signatures for the prepare phase
	ViewNumber      int64             `protobuf:"varint,4,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                                                                      // Current view number
	LeaderSignature string            `protobuf:"bytes,5,opt,name=leader_signature,json=leaderSignature,proto3" json:"leader_signature,omitempty"`
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	mi := &file_proto_tpcbyz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{9}
}

func (x *PrepareRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PrepareRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PrepareRequest) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *PrepareRequest) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrepareRequest) GetLeaderSignature() string {
	if x != nil {
		return x.LeaderSignature
	}
	return ""
}

// Prepare message from replica to leader with partial signature
type PrepareMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber        int64          `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`             // Same view number to indicate consistency
	SequenceNumber    int64          `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // Same sequence number as the pre-prepare message
	SignedMsg         *SignedMessage `protobuf:"bytes,3,opt,name=signed_msg,json=signedMsg,proto3" json:"signed_msg,omitempty"`
	ClientRequestHash string         `protobuf:"bytes,5,opt,name=client_request_hash,json=clientRequestHash,proto3" json:"client_request_hash,omitempty"`
}

func (x *PrepareMessage) Reset() {
	*x = PrepareMessage{}
	mi := &file_proto_tpcbyz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMessage) ProtoMessage() {}

func (x *PrepareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMessage.ProtoReflect.Descriptor instead.
func (*PrepareMessage) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{10}
}

func (x *PrepareMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrepareMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PrepareMessage) GetSignedMsg() *SignedMessage {
	if x != nil {
		return x.SignedMsg
	}
	return nil
}

func (x *PrepareMessage) GetClientRequestHash() string {
	if x != nil {
		return x.ClientRequestHash
	}
	return ""
}

type CommitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber        int64          `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`             // Same view number to indicate consistency
	SequenceNumber    int64          `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // Same sequence number as the pre-prepare message
	SignedMsg         *SignedMessage `protobuf:"bytes,3,opt,name=signed_msg,json=signedMsg,proto3" json:"signed_msg,omitempty"`
	ClientRequestHash string         `protobuf:"bytes,5,opt,name=client_request_hash,json=clientRequestHash,proto3" json:"client_request_hash,omitempty"`
}

func (x *CommitMessage) Reset() {
	*x = CommitMessage{}
	mi := &file_proto_tpcbyz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMessage) ProtoMessage() {}

func (x *CommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMessage.ProtoReflect.Descriptor instead.
func (*CommitMessage) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{11}
}

func (x *CommitMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *CommitMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CommitMessage) GetSignedMsg() *SignedMessage {
	if x != nil {
		return x.SignedMsg
	}
	return nil
}

func (x *CommitMessage) GetClientRequestHash() string {
	if x != nil {
		return x.ClientRequestHash
	}
	return ""
}

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber  int64             `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`                                                          // Sequence number of the transaction
	Digest          string            `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`                                                                                                 // Digest of the pre-prepare message
	Signatures      map[string]string `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 2f+1 signatures for the prepare phase
	ViewNumber      int64             `protobuf:"varint,4,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                                                                      // Current view number
	LeaderSignature string            `protobuf:"bytes,5,opt,name=leader_signature,json=leaderSignature,proto3" json:"leader_signature,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	mi := &file_proto_tpcbyz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{12}
}

func (x *CommitRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CommitRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CommitRequest) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *CommitRequest) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *CommitRequest) GetLeaderSignature() string {
	if x != nil {
		return x.LeaderSignature
	}
	return ""
}

// Signed message details
type SignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // ID of the node signing the message
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`         // Signature for the message
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	mi := &file_proto_tpcbyz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{13}
}

func (x *SignedMessage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SignedMessage) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// Two-Phase Commit (2PC) messages
type TPCPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions map[int64]*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Transactions to prepare
}

func (x *TPCPrepareRequest) Reset() {
	*x = TPCPrepareRequest{}
	mi := &file_proto_tpcbyz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCPrepareRequest) ProtoMessage() {}

func (x *TPCPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCPrepareRequest.ProtoReflect.Descriptor instead.
func (*TPCPrepareRequest) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{14}
}

func (x *TPCPrepareRequest) GetTransactions() map[int64]*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type TPCCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions map[int64]*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Transactions to commit
}

func (x *TPCCommitRequest) Reset() {
	*x = TPCCommitRequest{}
	mi := &file_proto_tpcbyz_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCCommitRequest) ProtoMessage() {}

func (x *TPCCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCCommitRequest.ProtoReflect.Descriptor instead.
func (*TPCCommitRequest) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{15}
}

func (x *TPCCommitRequest) GetTransactions() map[int64]*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type TPCAbortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions map[int64]*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Transactions to abort
}

func (x *TPCAbortRequest) Reset() {
	*x = TPCAbortRequest{}
	mi := &file_proto_tpcbyz_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCAbortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCAbortRequest) ProtoMessage() {}

func (x *TPCAbortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCAbortRequest.ProtoReflect.Descriptor instead.
func (*TPCAbortRequest) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{16}
}

func (x *TPCAbortRequest) GetTransactions() map[int64]*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type TPCAckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Acknowledgment of commit or abort
}

func (x *TPCAckResponse) Reset() {
	*x = TPCAckResponse{}
	mi := &file_proto_tpcbyz_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCAckResponse) ProtoMessage() {}

func (x *TPCAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCAckResponse.ProtoReflect.Descriptor instead.
func (*TPCAckResponse) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{17}
}

func (x *TPCAckResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Locking messages for 2PC
type TPCLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId int64   `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // ID of the transaction requesting the lock
	DataItems     []int64 `protobuf:"varint,2,rep,packed,name=data_items,json=dataItems,proto3" json:"data_items,omitempty"`      // List of data items to lock
}

func (x *TPCLockRequest) Reset() {
	*x = TPCLockRequest{}
	mi := &file_proto_tpcbyz_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCLockRequest) ProtoMessage() {}

func (x *TPCLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCLockRequest.ProtoReflect.Descriptor instead.
func (*TPCLockRequest) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{18}
}

func (x *TPCLockRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *TPCLockRequest) GetDataItems() []int64 {
	if x != nil {
		return x.DataItems
	}
	return nil
}

type TPCLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the lock operation succeeded
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Optional message for additional details
}

func (x *TPCLockResponse) Reset() {
	*x = TPCLockResponse{}
	mi := &file_proto_tpcbyz_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TPCLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCLockResponse) ProtoMessage() {}

func (x *TPCLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tpcbyz_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCLockResponse.ProtoReflect.Descriptor instead.
func (*TPCLockResponse) Descriptor() ([]byte, []int) {
	return file_proto_tpcbyz_proto_rawDescGZIP(), []int{19}
}

func (x *TPCLockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TPCLockResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_tpcbyz_proto protoreflect.FileDescriptor

var file_proto_tpcbyz_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x22, 0x2a, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x68, 0x0a, 0x0e, 0x54, 0x50, 0x43, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2a, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x85, 0x01, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x6f, 0x22, 0x49, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xb3, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79,
	0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa4, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc0, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xa2, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x70,
	0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x54, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x54, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8,
	0x01, 0x0a, 0x10, 0x54, 0x50, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x70, 0x63, 0x62,
	0x79, 0x7a, 0x2e, 0x54, 0x50, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x54, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x70, 0x63, 0x62,
	0x79, 0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x54, 0x50,
	0x43, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x50, 0x43,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x54, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2a, 0x0a, 0x0e, 0x54, 0x50, 0x43, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x56,
	0x0a, 0x0e, 0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x57, 0x0a,
	0x11, 0x50, 0x42, 0x46, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb6, 0x06, 0x0a, 0x08, 0x54, 0x50, 0x43, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x50, 0x42, 0x46, 0x54, 0x50, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x50,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x50, 0x42, 0x46, 0x54,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x50, 0x42, 0x46, 0x54, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x70,
	0x63, 0x62, 0x79, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c,
	0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x50, 0x43, 0x12, 0x1c, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x1a, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0d, 0x2e, 0x74, 0x70,
	0x63, 0x62, 0x79, 0x7a, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x63,
	0x62, 0x79, 0x7a, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x54, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x1c, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b,
	0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x54,
	0x50, 0x43, 0x43, 0x6f, 0x6f, 0x72, 0x69, 0x64, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x16, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x50, 0x43, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x70, 0x63, 0x62,
	0x79, 0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x54, 0x50, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x54, 0x50, 0x43, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x70, 0x63,
	0x62, 0x79, 0x7a, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79,
	0x7a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79,
	0x7a, 0x2e, 0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x54, 0x50, 0x43, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16,
	0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e, 0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2e,
	0x54, 0x50, 0x43, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x18, 0x5a, 0x16, 0x2e, 0x2e, 0x2f, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x74, 0x70, 0x63, 0x62, 0x79, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_tpcbyz_proto_rawDescOnce sync.Once
	file_proto_tpcbyz_proto_rawDescData = file_proto_tpcbyz_proto_rawDesc
)

func file_proto_tpcbyz_proto_rawDescGZIP() []byte {
	file_proto_tpcbyz_proto_rawDescOnce.Do(func() {
		file_proto_tpcbyz_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tpcbyz_proto_rawDescData)
	})
	return file_proto_tpcbyz_proto_rawDescData
}

var file_proto_tpcbyz_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_tpcbyz_proto_goTypes = []any{
	(*StatusResponse)(nil),       // 0: tpcbyz.StatusResponse
	(*ClientReplyMessage)(nil),   // 1: tpcbyz.ClientReplyMessage
	(*Empty)(nil),                // 2: tpcbyz.Empty
	(*TPCCertificate)(nil),       // 3: tpcbyz.TPCCertificate
	(*HealthResponse)(nil),       // 4: tpcbyz.HealthResponse
	(*Transaction)(nil),          // 5: tpcbyz.Transaction
	(*TransactionResponse)(nil),  // 6: tpcbyz.TransactionResponse
	(*ClientRequestMessage)(nil), // 7: tpcbyz.ClientRequestMessage
	(*PrePrepareMessage)(nil),    // 8: tpcbyz.PrePrepareMessage
	(*PrepareRequest)(nil),       // 9: tpcbyz.PrepareRequest
	(*PrepareMessage)(nil),       // 10: tpcbyz.PrepareMessage
	(*CommitMessage)(nil),        // 11: tpcbyz.CommitMessage
	(*CommitRequest)(nil),        // 12: tpcbyz.CommitRequest
	(*SignedMessage)(nil),        // 13: tpcbyz.SignedMessage
	(*TPCPrepareRequest)(nil),    // 14: tpcbyz.TPCPrepareRequest
	(*TPCCommitRequest)(nil),     // 15: tpcbyz.TPCCommitRequest
	(*TPCAbortRequest)(nil),      // 16: tpcbyz.TPCAbortRequest
	(*TPCAckResponse)(nil),       // 17: tpcbyz.TPCAckResponse
	(*TPCLockRequest)(nil),       // 18: tpcbyz.TPCLockRequest
	(*TPCLockResponse)(nil),      // 19: tpcbyz.TPCLockResponse
	nil,                          // 20: tpcbyz.PrepareRequest.SignaturesEntry
	nil,                          // 21: tpcbyz.CommitRequest.SignaturesEntry
	nil,                          // 22: tpcbyz.TPCPrepareRequest.TransactionsEntry
	nil,                          // 23: tpcbyz.TPCCommitRequest.TransactionsEntry
	nil,                          // 24: tpcbyz.TPCAbortRequest.TransactionsEntry
}
var file_proto_tpcbyz_proto_depIdxs = []int32{
	12, // 0: tpcbyz.TPCCertificate.commit_request:type_name -> tpcbyz.CommitRequest
	5,  // 1: tpcbyz.ClientRequestMessage.transaction:type_name -> tpcbyz.Transaction
	7,  // 2: tpcbyz.PrePrepareMessage.request:type_name -> tpcbyz.ClientRequestMessage
	20, // 3: tpcbyz.PrepareRequest.signatures:type_name -> tpcbyz.PrepareRequest.SignaturesEntry
	13, // 4: tpcbyz.PrepareMessage.signed_msg:type_name -> tpcbyz.SignedMessage
	13, // 5: tpcbyz.CommitMessage.signed_msg:type_name -> tpcbyz.SignedMessage
	21, // 6: tpcbyz.CommitRequest.signatures:type_name -> tpcbyz.CommitRequest.SignaturesEntry
	22, // 7: tpcbyz.TPCPrepareRequest.transactions:type_name -> tpcbyz.TPCPrepareRequest.TransactionsEntry
	23, // 8: tpcbyz.TPCCommitRequest.transactions:type_name -> tpcbyz.TPCCommitRequest.TransactionsEntry
	24, // 9: tpcbyz.TPCAbortRequest.transactions:type_name -> tpcbyz.TPCAbortRequest.TransactionsEntry
	5,  // 10: tpcbyz.TPCPrepareRequest.TransactionsEntry.value:type_name -> tpcbyz.Transaction
	5,  // 11: tpcbyz.TPCCommitRequest.TransactionsEntry.value:type_name -> tpcbyz.Transaction
	5,  // 12: tpcbyz.TPCAbortRequest.TransactionsEntry.value:type_name -> tpcbyz.Transaction
	1,  // 13: tpcbyz.PBFTClientService.ReplyMessage:input_type -> tpcbyz.ClientReplyMessage
	8,  // 14: tpcbyz.TPCShard.PBFTPrePrepare:input_type -> tpcbyz.PrePrepareMessage
	9,  // 15: tpcbyz.TPCShard.PBFTPrepare:input_type -> tpcbyz.PrepareRequest
	12, // 16: tpcbyz.TPCShard.PBFTCommit:input_type -> tpcbyz.CommitRequest
	7,  // 17: tpcbyz.TPCShard.ClientRequest:input_type -> tpcbyz.ClientRequestMessage
	7,  // 18: tpcbyz.TPCShard.ClientRequestTPC:input_type -> tpcbyz.ClientRequestMessage
	2,  // 19: tpcbyz.TPCShard.CheckHealth:input_type -> tpcbyz.Empty
	7,  // 20: tpcbyz.TPCShard.TPCPrepare:input_type -> tpcbyz.ClientRequestMessage
	3,  // 21: tpcbyz.TPCShard.TPCCooridnatorCall:input_type -> tpcbyz.TPCCertificate
	7,  // 22: tpcbyz.TPCShard.TPCCommit:input_type -> tpcbyz.ClientRequestMessage
	7,  // 23: tpcbyz.TPCShard.TPCAbort:input_type -> tpcbyz.ClientRequestMessage
	18, // 24: tpcbyz.TPCShard.TPCLock:input_type -> tpcbyz.TPCLockRequest
	18, // 25: tpcbyz.TPCShard.TPCUnlock:input_type -> tpcbyz.TPCLockRequest
	0,  // 26: tpcbyz.PBFTClientService.ReplyMessage:output_type -> tpcbyz.StatusResponse
	10, // 27: tpcbyz.TPCShard.PBFTPrePrepare:output_type -> tpcbyz.PrepareMessage
	11, // 28: tpcbyz.TPCShard.PBFTPrepare:output_type -> tpcbyz.CommitMessage
	0,  // 29: tpcbyz.TPCShard.PBFTCommit:output_type -> tpcbyz.StatusResponse
	1,  // 30: tpcbyz.TPCShard.ClientRequest:output_type -> tpcbyz.ClientReplyMessage
	1,  // 31: tpcbyz.TPCShard.ClientRequestTPC:output_type -> tpcbyz.ClientReplyMessage
	4,  // 32: tpcbyz.TPCShard.CheckHealth:output_type -> tpcbyz.HealthResponse
	6,  // 33: tpcbyz.TPCShard.TPCPrepare:output_type -> tpcbyz.TransactionResponse
	6,  // 34: tpcbyz.TPCShard.TPCCooridnatorCall:output_type -> tpcbyz.TransactionResponse
	6,  // 35: tpcbyz.TPCShard.TPCCommit:output_type -> tpcbyz.TransactionResponse
	6,  // 36: tpcbyz.TPCShard.TPCAbort:output_type -> tpcbyz.TransactionResponse
	19, // 37: tpcbyz.TPCShard.TPCLock:output_type -> tpcbyz.TPCLockResponse
	19, // 38: tpcbyz.TPCShard.TPCUnlock:output_type -> tpcbyz.TPCLockResponse
	26, // [26:39] is the sub-list for method output_type
	13, // [13:26] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_tpcbyz_proto_init() }
func file_proto_tpcbyz_proto_init() {
	if File_proto_tpcbyz_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tpcbyz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_tpcbyz_proto_goTypes,
		DependencyIndexes: file_proto_tpcbyz_proto_depIdxs,
		MessageInfos:      file_proto_tpcbyz_proto_msgTypes,
	}.Build()
	File_proto_tpcbyz_proto = out.File
	file_proto_tpcbyz_proto_rawDesc = nil
	file_proto_tpcbyz_proto_goTypes = nil
	file_proto_tpcbyz_proto_depIdxs = nil
}
