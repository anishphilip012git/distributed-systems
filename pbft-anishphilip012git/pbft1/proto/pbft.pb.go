// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto/pbft.proto

package pbft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reply message from replica to client
type ClientReplyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber       int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                  // Current view number
	RequestId        int64  `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                     // Unique request ID
	Status           string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                             // Execution status of the request
	ReplicaSignature string `protobuf:"bytes,4,opt,name=replica_signature,json=replicaSignature,proto3" json:"replica_signature,omitempty"` // Replica's signature on the reply
}

func (x *ClientReplyMessage) Reset() {
	*x = ClientReplyMessage{}
	mi := &file_proto_pbft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReplyMessage) ProtoMessage() {}

func (x *ClientReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReplyMessage.ProtoReflect.Descriptor instead.
func (*ClientReplyMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{0}
}

func (x *ClientReplyMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *ClientReplyMessage) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ClientReplyMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClientReplyMessage) GetReplicaSignature() string {
	if x != nil {
		return x.ReplicaSignature
	}
	return ""
}

// Empty message for health checks
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_pbft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{1}
}

// Health status response
type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy bool `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_proto_pbft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{2}
}

func (x *HealthResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

// Client request message with transaction
type ClientRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId        string       `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Timestamp       int64        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Transaction     *Transaction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"` // The transaction to be sent
	ClientSignature string       `protobuf:"bytes,4,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"`
}

func (x *ClientRequestMessage) Reset() {
	*x = ClientRequestMessage{}
	mi := &file_proto_pbft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequestMessage) ProtoMessage() {}

func (x *ClientRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequestMessage.ProtoReflect.Descriptor instead.
func (*ClientRequestMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{3}
}

func (x *ClientRequestMessage) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientRequestMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ClientRequestMessage) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ClientRequestMessage) GetClientSignature() string {
	if x != nil {
		return x.ClientSignature
	}
	return ""
}

// Transaction details
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount   int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Index    int64  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_proto_pbft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Transaction) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *Transaction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Pre-prepare message from leader to replicas
type PrePrepareMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber        int64                 `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`               // Current view number
	SequenceNumber    int64                 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`   // Sequence number assigned by leader
	Request           *ClientRequestMessage `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`                                        // Original client request
	LeaderSignature   string                `protobuf:"bytes,4,opt,name=leader_signature,json=leaderSignature,proto3" json:"leader_signature,omitempty"` // Leader's individual signature for authenticity
	ClientRequestHash string                `protobuf:"bytes,5,opt,name=client_request_hash,json=clientRequestHash,proto3" json:"client_request_hash,omitempty"`
}

func (x *PrePrepareMessage) Reset() {
	*x = PrePrepareMessage{}
	mi := &file_proto_pbft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrePrepareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepareMessage) ProtoMessage() {}

func (x *PrePrepareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepareMessage.ProtoReflect.Descriptor instead.
func (*PrePrepareMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{5}
}

func (x *PrePrepareMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrePrepareMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PrePrepareMessage) GetRequest() *ClientRequestMessage {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PrePrepareMessage) GetLeaderSignature() string {
	if x != nil {
		return x.LeaderSignature
	}
	return ""
}

func (x *PrePrepareMessage) GetClientRequestHash() string {
	if x != nil {
		return x.ClientRequestHash
	}
	return ""
}

// Prepare message from replica to leader with partial signature
type PrepareMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber              int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                                         // Same view number to indicate consistency
	SequenceNumber          int64  `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`                             // Same sequence number as the pre-prepare message
	ReplicaId               string `protobuf:"bytes,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`                                             // ID of the replica responding with Prepare
	ReplicaPartialSignature []byte `protobuf:"bytes,4,opt,name=replica_partial_signature,json=replicaPartialSignature,proto3" json:"replica_partial_signature,omitempty"` // Each replica's partial signature on the prepare message
	ClientRequestHash       string `protobuf:"bytes,5,opt,name=client_request_hash,json=clientRequestHash,proto3" json:"client_request_hash,omitempty"`
}

func (x *PrepareMessage) Reset() {
	*x = PrepareMessage{}
	mi := &file_proto_pbft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMessage) ProtoMessage() {}

func (x *PrepareMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMessage.ProtoReflect.Descriptor instead.
func (*PrepareMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrepareMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PrepareMessage) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *PrepareMessage) GetReplicaPartialSignature() []byte {
	if x != nil {
		return x.ReplicaPartialSignature
	}
	return nil
}

func (x *PrepareMessage) GetClientRequestHash() string {
	if x != nil {
		return x.ClientRequestHash
	}
	return ""
}

// PrepareCertificate message as part of the quorum of partial signatures
type PrepareCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber      int64             `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`               // Current view number
	PrepareMessages []*PrepareMessage `protobuf:"bytes,2,rep,name=prepare_messages,json=prepareMessages,proto3" json:"prepare_messages,omitempty"` // Collection of prepare messages reaching quorum
	SequenceNumber  int64             `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *PrepareCertificate) Reset() {
	*x = PrepareCertificate{}
	mi := &file_proto_pbft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCertificate) ProtoMessage() {}

func (x *PrepareCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCertificate.ProtoReflect.Descriptor instead.
func (*PrepareCertificate) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{7}
}

func (x *PrepareCertificate) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrepareCertificate) GetPrepareMessages() []*PrepareMessage {
	if x != nil {
		return x.PrepareMessages
	}
	return nil
}

func (x *PrepareCertificate) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Commit message with aggregated threshold signature
type PrepareReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber          int64                 `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                           // Current view number
	PrepareCertificate  *PrepareCertificate   `protobuf:"bytes,2,opt,name=prepare_certificate,json=prepareCertificate,proto3" json:"prepare_certificate,omitempty"`    // Certificate formed by prepare messages
	AggregatedSignature []byte                `protobuf:"bytes,3,opt,name=aggregated_signature,json=aggregatedSignature,proto3" json:"aggregated_signature,omitempty"` // Aggregated threshold signature after quorum is reached
	Request             *ClientRequestMessage `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`                                                    // Full client request for consistency
	LeaderSignature     string                `protobuf:"bytes,5,opt,name=leader_signature,json=leaderSignature,proto3" json:"leader_signature,omitempty"`
	SequenceNumber      int64                 `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *PrepareReqMessage) Reset() {
	*x = PrepareReqMessage{}
	mi := &file_proto_pbft_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareReqMessage) ProtoMessage() {}

func (x *PrepareReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareReqMessage.ProtoReflect.Descriptor instead.
func (*PrepareReqMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{8}
}

func (x *PrepareReqMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PrepareReqMessage) GetPrepareCertificate() *PrepareCertificate {
	if x != nil {
		return x.PrepareCertificate
	}
	return nil
}

func (x *PrepareReqMessage) GetAggregatedSignature() []byte {
	if x != nil {
		return x.AggregatedSignature
	}
	return nil
}

func (x *PrepareReqMessage) GetRequest() *ClientRequestMessage {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PrepareReqMessage) GetLeaderSignature() string {
	if x != nil {
		return x.LeaderSignature
	}
	return ""
}

func (x *PrepareReqMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// CommitCertificate finalized with aggregated signatures from replicas
type CommitCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber         int64              `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                          // Current view number
	PrepareReqMessages *PrepareReqMessage `protobuf:"bytes,2,opt,name=prepare_req_messages,json=prepareReqMessages,proto3" json:"prepare_req_messages,omitempty"` // Collection of commit messages
	SequenceNumber     int64              `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *CommitCertificate) Reset() {
	*x = CommitCertificate{}
	mi := &file_proto_pbft_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCertificate) ProtoMessage() {}

func (x *CommitCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCertificate.ProtoReflect.Descriptor instead.
func (*CommitCertificate) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{9}
}

func (x *CommitCertificate) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *CommitCertificate) GetPrepareReqMessages() *PrepareReqMessage {
	if x != nil {
		return x.PrepareReqMessages
	}
	return nil
}

func (x *CommitCertificate) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Execution order message for the final execution phase
type CommitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber        int64                 `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                     // Current view number
	SequenceNumber    int64                 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`         // Sequence number of the request to execute
	CommitCertificate *CommitCertificate    `protobuf:"bytes,3,opt,name=commit_certificate,json=commitCertificate,proto3" json:"commit_certificate,omitempty"` // Finalized commit certificate
	Request           *ClientRequestMessage `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`                                              // Full client request for consistency
	LeaderSignature   string                `protobuf:"bytes,5,opt,name=leader_signature,json=leaderSignature,proto3" json:"leader_signature,omitempty"`
}

func (x *CommitMessage) Reset() {
	*x = CommitMessage{}
	mi := &file_proto_pbft_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMessage) ProtoMessage() {}

func (x *CommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMessage.ProtoReflect.Descriptor instead.
func (*CommitMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{10}
}

func (x *CommitMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *CommitMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CommitMessage) GetCommitCertificate() *CommitCertificate {
	if x != nil {
		return x.CommitCertificate
	}
	return nil
}

func (x *CommitMessage) GetRequest() *ClientRequestMessage {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CommitMessage) GetLeaderSignature() string {
	if x != nil {
		return x.LeaderSignature
	}
	return ""
}

// Reply message from replica to client
type ReplyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber       int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                  // Current view number
	RequestId        int64  `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                     // Unique request ID
	Status           string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                             // Execution status of the request
	ReplicaSignature string `protobuf:"bytes,4,opt,name=replica_signature,json=replicaSignature,proto3" json:"replica_signature,omitempty"` // Replica's signature on the reply
}

func (x *ReplyMessage) Reset() {
	*x = ReplyMessage{}
	mi := &file_proto_pbft_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessage) ProtoMessage() {}

func (x *ReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessage.ProtoReflect.Descriptor instead.
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{11}
}

func (x *ReplyMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *ReplyMessage) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReplyMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReplyMessage) GetReplicaSignature() string {
	if x != nil {
		return x.ReplicaSignature
	}
	return ""
}

// Status response for RPC functions
type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates success or failure of the RPC call
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_proto_pbft_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{12}
}

func (x *StatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// View change message to request a new view due to suspected primary fault
type ViewChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber         int64 `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                           // New view number being requested
	LastSequenceNumber int64 `protobuf:"varint,2,opt,name=last_sequence_number,json=lastSequenceNumber,proto3" json:"last_sequence_number,omitempty"` // Last stable sequence number seen by replica
	// repeated PrepareMessage prepared_messages = 3; // List of messages prepared by the replica
	PreparedCertificates []*PrepareCertificate `protobuf:"bytes,3,rep,name=prepared_certificates,json=preparedCertificates,proto3" json:"prepared_certificates,omitempty"`
	ReplicaId            string                `protobuf:"bytes,4,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"` // ID of the replica requesting view change
	CheckpointMsgs       []*CheckpointMessage  `protobuf:"bytes,5,rep,name=checkpoint_msgs,json=checkpointMsgs,proto3" json:"checkpoint_msgs,omitempty"`
}

func (x *ViewChangeMessage) Reset() {
	*x = ViewChangeMessage{}
	mi := &file_proto_pbft_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewChangeMessage) ProtoMessage() {}

func (x *ViewChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewChangeMessage.ProtoReflect.Descriptor instead.
func (*ViewChangeMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{13}
}

func (x *ViewChangeMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *ViewChangeMessage) GetLastSequenceNumber() int64 {
	if x != nil {
		return x.LastSequenceNumber
	}
	return 0
}

func (x *ViewChangeMessage) GetPreparedCertificates() []*PrepareCertificate {
	if x != nil {
		return x.PreparedCertificates
	}
	return nil
}

func (x *ViewChangeMessage) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *ViewChangeMessage) GetCheckpointMsgs() []*CheckpointMessage {
	if x != nil {
		return x.CheckpointMsgs
	}
	return nil
}

// New view message from the new primary to announce the new view
type NewViewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber         int64                `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                          // New view number
	ViewChangeMessages []*ViewChangeMessage `protobuf:"bytes,2,rep,name=view_change_messages,json=viewChangeMessages,proto3" json:"view_change_messages,omitempty"` // List of received view change messages
	// PrepareCertificate prepare_certificate = 3; // Certificate to resume interrupted operation
	PrePrepareMessages []*PrePrepareMessage `protobuf:"bytes,3,rep,name=pre_prepare_messages,json=prePrepareMessages,proto3" json:"pre_prepare_messages,omitempty"`
}

func (x *NewViewMessage) Reset() {
	*x = NewViewMessage{}
	mi := &file_proto_pbft_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewViewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewViewMessage) ProtoMessage() {}

func (x *NewViewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewViewMessage.ProtoReflect.Descriptor instead.
func (*NewViewMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{14}
}

func (x *NewViewMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *NewViewMessage) GetViewChangeMessages() []*ViewChangeMessage {
	if x != nil {
		return x.ViewChangeMessages
	}
	return nil
}

func (x *NewViewMessage) GetPrePrepareMessages() []*PrePrepareMessage {
	if x != nil {
		return x.PrePrepareMessages
	}
	return nil
}

// Checkpoint message to share replica’s state at a given sequence number
type CheckpointMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber      int64  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // Sequence number at the checkpoint
	StateDigest         string `protobuf:"bytes,2,opt,name=state_digest,json=stateDigest,proto3" json:"state_digest,omitempty"`           // Digest of the replica’s state
	ReplicaId           string `protobuf:"bytes,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`                 // ID of the replica broadcasting the checkpoint
	ViewNumber          int64  `protobuf:"varint,4,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`             // View number when the checkpoint was created
	AggregatedSignature []byte `protobuf:"bytes,5,opt,name=aggregated_signature,json=aggregatedSignature,proto3" json:"aggregated_signature,omitempty"`
}

func (x *CheckpointMessage) Reset() {
	*x = CheckpointMessage{}
	mi := &file_proto_pbft_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointMessage) ProtoMessage() {}

func (x *CheckpointMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointMessage.ProtoReflect.Descriptor instead.
func (*CheckpointMessage) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{15}
}

func (x *CheckpointMessage) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CheckpointMessage) GetStateDigest() string {
	if x != nil {
		return x.StateDigest
	}
	return ""
}

func (x *CheckpointMessage) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *CheckpointMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *CheckpointMessage) GetAggregatedSignature() []byte {
	if x != nil {
		return x.AggregatedSignature
	}
	return nil
}

// Prepare message from replica to leader with partial signature
type ReplicaChkptMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int64 view_number = 1;                  // Same view number to indicate consistency
	// int64 sequence_number = 2;              // Same sequence number as the pre-prepare message
	ReplicaId               string `protobuf:"bytes,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`                                             // ID of the replica responding with Prepare
	ReplicaPartialSignature []byte `protobuf:"bytes,4,opt,name=replica_partial_signature,json=replicaPartialSignature,proto3" json:"replica_partial_signature,omitempty"` // Each replica's partial signature on the prepare message
}

func (x *ReplicaChkptMsg) Reset() {
	*x = ReplicaChkptMsg{}
	mi := &file_proto_pbft_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicaChkptMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaChkptMsg) ProtoMessage() {}

func (x *ReplicaChkptMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaChkptMsg.ProtoReflect.Descriptor instead.
func (*ReplicaChkptMsg) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{16}
}

func (x *ReplicaChkptMsg) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *ReplicaChkptMsg) GetReplicaPartialSignature() []byte {
	if x != nil {
		return x.ReplicaPartialSignature
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowWatermark  uint64 `protobuf:"varint,1,opt,name=low_watermark,json=lowWatermark,proto3" json:"low_watermark,omitempty"`
	HighWatermark uint64 `protobuf:"varint,2,opt,name=high_watermark,json=highWatermark,proto3" json:"high_watermark,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_proto_pbft_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{17}
}

func (x *LogRequest) GetLowWatermark() uint64 {
	if x != nil {
		return x.LowWatermark
	}
	return 0
}

func (x *LogRequest) GetHighWatermark() uint64 {
	if x != nil {
		return x.HighWatermark
	}
	return 0
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*PrepareMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_proto_pbft_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pbft_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_proto_pbft_proto_rawDescGZIP(), []int{18}
}

func (x *LogResponse) GetMessages() []*PrepareMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_proto_pbft_proto protoreflect.FileDescriptor

var file_proto_pbft_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x70, 0x62, 0x66, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x0a,
	0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6f, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xee,
	0x01, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xe5, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbc, 0x02, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x49, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62,
	0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x2a,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x11, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x14, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x66,
	0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xd2, 0x01,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x6b,
	0x70, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x58, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x69, 0x67,
	0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3f, 0x0a, 0x0b, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x32, 0x53, 0x0a, 0x11, 0x50,
	0x42, 0x46, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x66,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xcb, 0x04, 0x0a, 0x0b, 0x50, 0x42, 0x46, 0x54, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x0b, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x66, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x50, 0x72, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a,
	0x1e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x56, 0x69,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x66, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70,
	0x62, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x6b, 0x70, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x66, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62,
	0x66, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15,
	0x5a, 0x13, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x66, 0x74, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x3b, 0x70, 0x62, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_pbft_proto_rawDescOnce sync.Once
	file_proto_pbft_proto_rawDescData = file_proto_pbft_proto_rawDesc
)

func file_proto_pbft_proto_rawDescGZIP() []byte {
	file_proto_pbft_proto_rawDescOnce.Do(func() {
		file_proto_pbft_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_pbft_proto_rawDescData)
	})
	return file_proto_pbft_proto_rawDescData
}

var file_proto_pbft_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_pbft_proto_goTypes = []any{
	(*ClientReplyMessage)(nil),   // 0: pbft.ClientReplyMessage
	(*Empty)(nil),                // 1: pbft.Empty
	(*HealthResponse)(nil),       // 2: pbft.HealthResponse
	(*ClientRequestMessage)(nil), // 3: pbft.ClientRequestMessage
	(*Transaction)(nil),          // 4: pbft.Transaction
	(*PrePrepareMessage)(nil),    // 5: pbft.PrePrepareMessage
	(*PrepareMessage)(nil),       // 6: pbft.PrepareMessage
	(*PrepareCertificate)(nil),   // 7: pbft.PrepareCertificate
	(*PrepareReqMessage)(nil),    // 8: pbft.PrepareReqMessage
	(*CommitCertificate)(nil),    // 9: pbft.CommitCertificate
	(*CommitMessage)(nil),        // 10: pbft.CommitMessage
	(*ReplyMessage)(nil),         // 11: pbft.ReplyMessage
	(*StatusResponse)(nil),       // 12: pbft.StatusResponse
	(*ViewChangeMessage)(nil),    // 13: pbft.ViewChangeMessage
	(*NewViewMessage)(nil),       // 14: pbft.NewViewMessage
	(*CheckpointMessage)(nil),    // 15: pbft.CheckpointMessage
	(*ReplicaChkptMsg)(nil),      // 16: pbft.ReplicaChkptMsg
	(*LogRequest)(nil),           // 17: pbft.LogRequest
	(*LogResponse)(nil),          // 18: pbft.LogResponse
}
var file_proto_pbft_proto_depIdxs = []int32{
	4,  // 0: pbft.ClientRequestMessage.transaction:type_name -> pbft.Transaction
	3,  // 1: pbft.PrePrepareMessage.request:type_name -> pbft.ClientRequestMessage
	6,  // 2: pbft.PrepareCertificate.prepare_messages:type_name -> pbft.PrepareMessage
	7,  // 3: pbft.PrepareReqMessage.prepare_certificate:type_name -> pbft.PrepareCertificate
	3,  // 4: pbft.PrepareReqMessage.request:type_name -> pbft.ClientRequestMessage
	8,  // 5: pbft.CommitCertificate.prepare_req_messages:type_name -> pbft.PrepareReqMessage
	9,  // 6: pbft.CommitMessage.commit_certificate:type_name -> pbft.CommitCertificate
	3,  // 7: pbft.CommitMessage.request:type_name -> pbft.ClientRequestMessage
	7,  // 8: pbft.ViewChangeMessage.prepared_certificates:type_name -> pbft.PrepareCertificate
	15, // 9: pbft.ViewChangeMessage.checkpoint_msgs:type_name -> pbft.CheckpointMessage
	13, // 10: pbft.NewViewMessage.view_change_messages:type_name -> pbft.ViewChangeMessage
	5,  // 11: pbft.NewViewMessage.pre_prepare_messages:type_name -> pbft.PrePrepareMessage
	6,  // 12: pbft.LogResponse.messages:type_name -> pbft.PrepareMessage
	0,  // 13: pbft.PBFTClientService.ReplyMessage:input_type -> pbft.ClientReplyMessage
	1,  // 14: pbft.PBFTService.CheckHealth:input_type -> pbft.Empty
	3,  // 15: pbft.PBFTService.ClientRequest:input_type -> pbft.ClientRequestMessage
	5,  // 16: pbft.PBFTService.PrePrepareRequest:input_type -> pbft.PrePrepareMessage
	8,  // 17: pbft.PBFTService.PrepareWithAggregatedSignature:input_type -> pbft.PrepareReqMessage
	10, // 18: pbft.PBFTService.CommitRequest:input_type -> pbft.CommitMessage
	13, // 19: pbft.PBFTService.ViewChange:input_type -> pbft.ViewChangeMessage
	14, // 20: pbft.PBFTService.NewView:input_type -> pbft.NewViewMessage
	15, // 21: pbft.PBFTService.ProcessCheckpoint:input_type -> pbft.CheckpointMessage
	17, // 22: pbft.PBFTService.RequestLogsInRange:input_type -> pbft.LogRequest
	12, // 23: pbft.PBFTClientService.ReplyMessage:output_type -> pbft.StatusResponse
	2,  // 24: pbft.PBFTService.CheckHealth:output_type -> pbft.HealthResponse
	0,  // 25: pbft.PBFTService.ClientRequest:output_type -> pbft.ClientReplyMessage
	6,  // 26: pbft.PBFTService.PrePrepareRequest:output_type -> pbft.PrepareMessage
	12, // 27: pbft.PBFTService.PrepareWithAggregatedSignature:output_type -> pbft.StatusResponse
	12, // 28: pbft.PBFTService.CommitRequest:output_type -> pbft.StatusResponse
	12, // 29: pbft.PBFTService.ViewChange:output_type -> pbft.StatusResponse
	12, // 30: pbft.PBFTService.NewView:output_type -> pbft.StatusResponse
	16, // 31: pbft.PBFTService.ProcessCheckpoint:output_type -> pbft.ReplicaChkptMsg
	18, // 32: pbft.PBFTService.RequestLogsInRange:output_type -> pbft.LogResponse
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_pbft_proto_init() }
func file_proto_pbft_proto_init() {
	if File_proto_pbft_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_pbft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_pbft_proto_goTypes,
		DependencyIndexes: file_proto_pbft_proto_depIdxs,
		MessageInfos:      file_proto_pbft_proto_msgTypes,
	}.Build()
	File_proto_pbft_proto = out.File
	file_proto_pbft_proto_rawDesc = nil
	file_proto_pbft_proto_goTypes = nil
	file_proto_pbft_proto_depIdxs = nil
}
