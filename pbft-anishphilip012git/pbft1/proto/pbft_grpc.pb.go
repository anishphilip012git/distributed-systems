// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/pbft.proto

package pbft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PBFTClientService_ReplyMessage_FullMethodName = "/pbft.PBFTClientService/ReplyMessage"
)

// PBFTClientServiceClient is the client API for PBFTClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define a separate service for the client to receive replies
type PBFTClientServiceClient interface {
	ReplyMessage(ctx context.Context, in *ClientReplyMessage, opts ...grpc.CallOption) (*StatusResponse, error)
}

type pBFTClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTClientServiceClient(cc grpc.ClientConnInterface) PBFTClientServiceClient {
	return &pBFTClientServiceClient{cc}
}

func (c *pBFTClientServiceClient) ReplyMessage(ctx context.Context, in *ClientReplyMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PBFTClientService_ReplyMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTClientServiceServer is the server API for PBFTClientService service.
// All implementations must embed UnimplementedPBFTClientServiceServer
// for forward compatibility.
//
// Define a separate service for the client to receive replies
type PBFTClientServiceServer interface {
	ReplyMessage(context.Context, *ClientReplyMessage) (*StatusResponse, error)
	mustEmbedUnimplementedPBFTClientServiceServer()
}

// UnimplementedPBFTClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPBFTClientServiceServer struct{}

func (UnimplementedPBFTClientServiceServer) ReplyMessage(context.Context, *ClientReplyMessage) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyMessage not implemented")
}
func (UnimplementedPBFTClientServiceServer) mustEmbedUnimplementedPBFTClientServiceServer() {}
func (UnimplementedPBFTClientServiceServer) testEmbeddedByValue()                           {}

// UnsafePBFTClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTClientServiceServer will
// result in compilation errors.
type UnsafePBFTClientServiceServer interface {
	mustEmbedUnimplementedPBFTClientServiceServer()
}

func RegisterPBFTClientServiceServer(s grpc.ServiceRegistrar, srv PBFTClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedPBFTClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PBFTClientService_ServiceDesc, srv)
}

func _PBFTClientService_ReplyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTClientServiceServer).ReplyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTClientService_ReplyMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTClientServiceServer).ReplyMessage(ctx, req.(*ClientReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFTClientService_ServiceDesc is the grpc.ServiceDesc for PBFTClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFTClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbft.PBFTClientService",
	HandlerType: (*PBFTClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplyMessage",
			Handler:    _PBFTClientService_ReplyMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pbft.proto",
}

const (
	PBFTService_CheckHealth_FullMethodName                    = "/pbft.PBFTService/CheckHealth"
	PBFTService_ClientRequest_FullMethodName                  = "/pbft.PBFTService/ClientRequest"
	PBFTService_PrePrepareRequest_FullMethodName              = "/pbft.PBFTService/PrePrepareRequest"
	PBFTService_PrepareWithAggregatedSignature_FullMethodName = "/pbft.PBFTService/PrepareWithAggregatedSignature"
	PBFTService_CommitRequest_FullMethodName                  = "/pbft.PBFTService/CommitRequest"
	PBFTService_ViewChange_FullMethodName                     = "/pbft.PBFTService/ViewChange"
	PBFTService_NewView_FullMethodName                        = "/pbft.PBFTService/NewView"
	PBFTService_ProcessCheckpoint_FullMethodName              = "/pbft.PBFTService/ProcessCheckpoint"
	PBFTService_RequestLogsInRange_FullMethodName             = "/pbft.PBFTService/RequestLogsInRange"
)

// PBFTServiceClient is the client API for PBFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PBFT Service definition
type PBFTServiceClient interface {
	CheckHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	ClientRequest(ctx context.Context, in *ClientRequestMessage, opts ...grpc.CallOption) (*ClientReplyMessage, error)
	// Pre-prepare and Prepare phase: Leader to replicas, and replicas respond with PrepareMessage
	PrePrepareRequest(ctx context.Context, in *PrePrepareMessage, opts ...grpc.CallOption) (*PrepareMessage, error)
	// Combined Commit phase with aggregated signature: Leader to replicas
	PrepareWithAggregatedSignature(ctx context.Context, in *PrepareReqMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	// Execution phase: Replica executes the request
	CommitRequest(ctx context.Context, in *CommitMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	// View change and new view RPCs for handling faulty primary leader cases
	ViewChange(ctx context.Context, in *ViewChangeMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	NewView(ctx context.Context, in *NewViewMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	// Checkpointing RPC to share checkpoint states
	// rpc ProcessCheckpoint (CheckpointMessage) returns (StatusResponse);
	ProcessCheckpoint(ctx context.Context, in *CheckpointMessage, opts ...grpc.CallOption) (*ReplicaChkptMsg, error)
	// Request log entries within a specific range
	RequestLogsInRange(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type pBFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTServiceClient(cc grpc.ClientConnInterface) PBFTServiceClient {
	return &pBFTServiceClient{cc}
}

func (c *pBFTServiceClient) CheckHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, PBFTService_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) ClientRequest(ctx context.Context, in *ClientRequestMessage, opts ...grpc.CallOption) (*ClientReplyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientReplyMessage)
	err := c.cc.Invoke(ctx, PBFTService_ClientRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) PrePrepareRequest(ctx context.Context, in *PrePrepareMessage, opts ...grpc.CallOption) (*PrepareMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareMessage)
	err := c.cc.Invoke(ctx, PBFTService_PrePrepareRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) PrepareWithAggregatedSignature(ctx context.Context, in *PrepareReqMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PBFTService_PrepareWithAggregatedSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) CommitRequest(ctx context.Context, in *CommitMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PBFTService_CommitRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) ViewChange(ctx context.Context, in *ViewChangeMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PBFTService_ViewChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) NewView(ctx context.Context, in *NewViewMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PBFTService_NewView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) ProcessCheckpoint(ctx context.Context, in *CheckpointMessage, opts ...grpc.CallOption) (*ReplicaChkptMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicaChkptMsg)
	err := c.cc.Invoke(ctx, PBFTService_ProcessCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) RequestLogsInRange(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, PBFTService_RequestLogsInRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTServiceServer is the server API for PBFTService service.
// All implementations must embed UnimplementedPBFTServiceServer
// for forward compatibility.
//
// PBFT Service definition
type PBFTServiceServer interface {
	CheckHealth(context.Context, *Empty) (*HealthResponse, error)
	ClientRequest(context.Context, *ClientRequestMessage) (*ClientReplyMessage, error)
	// Pre-prepare and Prepare phase: Leader to replicas, and replicas respond with PrepareMessage
	PrePrepareRequest(context.Context, *PrePrepareMessage) (*PrepareMessage, error)
	// Combined Commit phase with aggregated signature: Leader to replicas
	PrepareWithAggregatedSignature(context.Context, *PrepareReqMessage) (*StatusResponse, error)
	// Execution phase: Replica executes the request
	CommitRequest(context.Context, *CommitMessage) (*StatusResponse, error)
	// View change and new view RPCs for handling faulty primary leader cases
	ViewChange(context.Context, *ViewChangeMessage) (*StatusResponse, error)
	NewView(context.Context, *NewViewMessage) (*StatusResponse, error)
	// Checkpointing RPC to share checkpoint states
	// rpc ProcessCheckpoint (CheckpointMessage) returns (StatusResponse);
	ProcessCheckpoint(context.Context, *CheckpointMessage) (*ReplicaChkptMsg, error)
	// Request log entries within a specific range
	RequestLogsInRange(context.Context, *LogRequest) (*LogResponse, error)
	mustEmbedUnimplementedPBFTServiceServer()
}

// UnimplementedPBFTServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPBFTServiceServer struct{}

func (UnimplementedPBFTServiceServer) CheckHealth(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedPBFTServiceServer) ClientRequest(context.Context, *ClientRequestMessage) (*ClientReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequest not implemented")
}
func (UnimplementedPBFTServiceServer) PrePrepareRequest(context.Context, *PrePrepareMessage) (*PrepareMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePrepareRequest not implemented")
}
func (UnimplementedPBFTServiceServer) PrepareWithAggregatedSignature(context.Context, *PrepareReqMessage) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareWithAggregatedSignature not implemented")
}
func (UnimplementedPBFTServiceServer) CommitRequest(context.Context, *CommitMessage) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitRequest not implemented")
}
func (UnimplementedPBFTServiceServer) ViewChange(context.Context, *ViewChangeMessage) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewChange not implemented")
}
func (UnimplementedPBFTServiceServer) NewView(context.Context, *NewViewMessage) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewView not implemented")
}
func (UnimplementedPBFTServiceServer) ProcessCheckpoint(context.Context, *CheckpointMessage) (*ReplicaChkptMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCheckpoint not implemented")
}
func (UnimplementedPBFTServiceServer) RequestLogsInRange(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLogsInRange not implemented")
}
func (UnimplementedPBFTServiceServer) mustEmbedUnimplementedPBFTServiceServer() {}
func (UnimplementedPBFTServiceServer) testEmbeddedByValue()                     {}

// UnsafePBFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTServiceServer will
// result in compilation errors.
type UnsafePBFTServiceServer interface {
	mustEmbedUnimplementedPBFTServiceServer()
}

func RegisterPBFTServiceServer(s grpc.ServiceRegistrar, srv PBFTServiceServer) {
	// If the following call pancis, it indicates UnimplementedPBFTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PBFTService_ServiceDesc, srv)
}

func _PBFTService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).CheckHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_ClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ClientRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ClientRequest(ctx, req.(*ClientRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_PrePrepareRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).PrePrepareRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_PrePrepareRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).PrePrepareRequest(ctx, req.(*PrePrepareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_PrepareWithAggregatedSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).PrepareWithAggregatedSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_PrepareWithAggregatedSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).PrepareWithAggregatedSignature(ctx, req.(*PrepareReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_CommitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).CommitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_CommitRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).CommitRequest(ctx, req.(*CommitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_ViewChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewChangeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ViewChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ViewChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ViewChange(ctx, req.(*ViewChangeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_NewView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewViewMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).NewView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_NewView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).NewView(ctx, req.(*NewViewMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_ProcessCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ProcessCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_ProcessCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ProcessCheckpoint(ctx, req.(*CheckpointMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_RequestLogsInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).RequestLogsInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTService_RequestLogsInRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).RequestLogsInRange(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFTService_ServiceDesc is the grpc.ServiceDesc for PBFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbft.PBFTService",
	HandlerType: (*PBFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _PBFTService_CheckHealth_Handler,
		},
		{
			MethodName: "ClientRequest",
			Handler:    _PBFTService_ClientRequest_Handler,
		},
		{
			MethodName: "PrePrepareRequest",
			Handler:    _PBFTService_PrePrepareRequest_Handler,
		},
		{
			MethodName: "PrepareWithAggregatedSignature",
			Handler:    _PBFTService_PrepareWithAggregatedSignature_Handler,
		},
		{
			MethodName: "CommitRequest",
			Handler:    _PBFTService_CommitRequest_Handler,
		},
		{
			MethodName: "ViewChange",
			Handler:    _PBFTService_ViewChange_Handler,
		},
		{
			MethodName: "NewView",
			Handler:    _PBFTService_NewView_Handler,
		},
		{
			MethodName: "ProcessCheckpoint",
			Handler:    _PBFTService_ProcessCheckpoint_Handler,
		},
		{
			MethodName: "RequestLogsInRange",
			Handler:    _PBFTService_RequestLogsInRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pbft.proto",
}
