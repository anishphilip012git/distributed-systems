// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/tpc.proto

package tpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TPCShard_PaxosPrepare_FullMethodName       = "/tpc.TPCShard/PaxosPrepare"
	TPCShard_PaxosAccept_FullMethodName        = "/tpc.TPCShard/PaxosAccept"
	TPCShard_PaxosDecide_FullMethodName        = "/tpc.TPCShard/PaxosDecide"
	TPCShard_PaxosSyncDataStore_FullMethodName = "/tpc.TPCShard/PaxosSyncDataStore"
	TPCShard_SendTransaction_FullMethodName    = "/tpc.TPCShard/SendTransaction"
	TPCShard_CheckHealth_FullMethodName        = "/tpc.TPCShard/CheckHealth"
	TPCShard_TPCPrepare_FullMethodName         = "/tpc.TPCShard/TPCPrepare"
	TPCShard_TPCCommit_FullMethodName          = "/tpc.TPCShard/TPCCommit"
	TPCShard_TPCAbort_FullMethodName           = "/tpc.TPCShard/TPCAbort"
	TPCShard_TPCLock_FullMethodName            = "/tpc.TPCShard/TPCLock"
	TPCShard_TPCUnlock_FullMethodName          = "/tpc.TPCShard/TPCUnlock"
)

// TPCShardClient is the client API for TPCShard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TPCShardClient interface {
	// Paxos RPCs for intra-shard transactions
	PaxosPrepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PromiseResponse, error)
	PaxosAccept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptedResponse, error)
	PaxosDecide(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	PaxosSyncDataStore(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// RPCs for handling transactions
	SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Health check for shards
	CheckHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// Two-Phase Commit (2PC) RPCs for cross-shard transactions
	TPCPrepare(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	TPCCommit(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	TPCAbort(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Locking and unlocking resources for 2PC
	TPCLock(ctx context.Context, in *TPCLockRequest, opts ...grpc.CallOption) (*TPCLockResponse, error)
	TPCUnlock(ctx context.Context, in *TPCLockRequest, opts ...grpc.CallOption) (*TPCLockResponse, error)
}

type tPCShardClient struct {
	cc grpc.ClientConnInterface
}

func NewTPCShardClient(cc grpc.ClientConnInterface) TPCShardClient {
	return &tPCShardClient{cc}
}

func (c *tPCShardClient) PaxosPrepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PromiseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromiseResponse)
	err := c.cc.Invoke(ctx, TPCShard_PaxosPrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) PaxosAccept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptedResponse)
	err := c.cc.Invoke(ctx, TPCShard_PaxosAccept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) PaxosDecide(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, TPCShard_PaxosDecide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) PaxosSyncDataStore(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, TPCShard_PaxosSyncDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, TPCShard_SendTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) CheckHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, TPCShard_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) TPCPrepare(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, TPCShard_TPCPrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) TPCCommit(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, TPCShard_TPCCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) TPCAbort(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, TPCShard_TPCAbort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) TPCLock(ctx context.Context, in *TPCLockRequest, opts ...grpc.CallOption) (*TPCLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TPCLockResponse)
	err := c.cc.Invoke(ctx, TPCShard_TPCLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPCShardClient) TPCUnlock(ctx context.Context, in *TPCLockRequest, opts ...grpc.CallOption) (*TPCLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TPCLockResponse)
	err := c.cc.Invoke(ctx, TPCShard_TPCUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TPCShardServer is the server API for TPCShard service.
// All implementations must embed UnimplementedTPCShardServer
// for forward compatibility.
type TPCShardServer interface {
	// Paxos RPCs for intra-shard transactions
	PaxosPrepare(context.Context, *PrepareRequest) (*PromiseResponse, error)
	PaxosAccept(context.Context, *AcceptRequest) (*AcceptedResponse, error)
	PaxosDecide(context.Context, *DecisionRequest) (*DecisionResponse, error)
	PaxosSyncDataStore(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// RPCs for handling transactions
	SendTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// Health check for shards
	CheckHealth(context.Context, *Empty) (*HealthResponse, error)
	// Two-Phase Commit (2PC) RPCs for cross-shard transactions
	TPCPrepare(context.Context, *TransactionRequest) (*TransactionResponse, error)
	TPCCommit(context.Context, *TransactionRequest) (*TransactionResponse, error)
	TPCAbort(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// Locking and unlocking resources for 2PC
	TPCLock(context.Context, *TPCLockRequest) (*TPCLockResponse, error)
	TPCUnlock(context.Context, *TPCLockRequest) (*TPCLockResponse, error)
	mustEmbedUnimplementedTPCShardServer()
}

// UnimplementedTPCShardServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTPCShardServer struct{}

func (UnimplementedTPCShardServer) PaxosPrepare(context.Context, *PrepareRequest) (*PromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaxosPrepare not implemented")
}
func (UnimplementedTPCShardServer) PaxosAccept(context.Context, *AcceptRequest) (*AcceptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaxosAccept not implemented")
}
func (UnimplementedTPCShardServer) PaxosDecide(context.Context, *DecisionRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaxosDecide not implemented")
}
func (UnimplementedTPCShardServer) PaxosSyncDataStore(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaxosSyncDataStore not implemented")
}
func (UnimplementedTPCShardServer) SendTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedTPCShardServer) CheckHealth(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedTPCShardServer) TPCPrepare(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPCPrepare not implemented")
}
func (UnimplementedTPCShardServer) TPCCommit(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPCCommit not implemented")
}
func (UnimplementedTPCShardServer) TPCAbort(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPCAbort not implemented")
}
func (UnimplementedTPCShardServer) TPCLock(context.Context, *TPCLockRequest) (*TPCLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPCLock not implemented")
}
func (UnimplementedTPCShardServer) TPCUnlock(context.Context, *TPCLockRequest) (*TPCLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TPCUnlock not implemented")
}
func (UnimplementedTPCShardServer) mustEmbedUnimplementedTPCShardServer() {}
func (UnimplementedTPCShardServer) testEmbeddedByValue()                  {}

// UnsafeTPCShardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TPCShardServer will
// result in compilation errors.
type UnsafeTPCShardServer interface {
	mustEmbedUnimplementedTPCShardServer()
}

func RegisterTPCShardServer(s grpc.ServiceRegistrar, srv TPCShardServer) {
	// If the following call pancis, it indicates UnimplementedTPCShardServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TPCShard_ServiceDesc, srv)
}

func _TPCShard_PaxosPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).PaxosPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_PaxosPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).PaxosPrepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_PaxosAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).PaxosAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_PaxosAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).PaxosAccept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_PaxosDecide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).PaxosDecide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_PaxosDecide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).PaxosDecide(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_PaxosSyncDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).PaxosSyncDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_PaxosSyncDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).PaxosSyncDataStore(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).SendTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).CheckHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_TPCPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).TPCPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_TPCPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).TPCPrepare(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_TPCCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).TPCCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_TPCCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).TPCCommit(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_TPCAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).TPCAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_TPCAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).TPCAbort(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_TPCLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPCLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).TPCLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_TPCLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).TPCLock(ctx, req.(*TPCLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TPCShard_TPCUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPCLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPCShardServer).TPCUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TPCShard_TPCUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPCShardServer).TPCUnlock(ctx, req.(*TPCLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TPCShard_ServiceDesc is the grpc.ServiceDesc for TPCShard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TPCShard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpc.TPCShard",
	HandlerType: (*TPCShardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaxosPrepare",
			Handler:    _TPCShard_PaxosPrepare_Handler,
		},
		{
			MethodName: "PaxosAccept",
			Handler:    _TPCShard_PaxosAccept_Handler,
		},
		{
			MethodName: "PaxosDecide",
			Handler:    _TPCShard_PaxosDecide_Handler,
		},
		{
			MethodName: "PaxosSyncDataStore",
			Handler:    _TPCShard_PaxosSyncDataStore_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TPCShard_SendTransaction_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _TPCShard_CheckHealth_Handler,
		},
		{
			MethodName: "TPCPrepare",
			Handler:    _TPCShard_TPCPrepare_Handler,
		},
		{
			MethodName: "TPCCommit",
			Handler:    _TPCShard_TPCCommit_Handler,
		},
		{
			MethodName: "TPCAbort",
			Handler:    _TPCShard_TPCAbort_Handler,
		},
		{
			MethodName: "TPCLock",
			Handler:    _TPCShard_TPCLock_Handler,
		},
		{
			MethodName: "TPCUnlock",
			Handler:    _TPCShard_TPCUnlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tpc.proto",
}
